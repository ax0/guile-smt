(define-library (smt db gdbm)
  (export make-gdbm-smt-number-db)
  (import (gdbm)
	  (scheme base)
	  (smt db)
	  (smt types))
  (begin
    ;; A convenient constructor: SMT DB for number-base keys with GDBM as the backend
    (define (make-gdbm-smt-number-db path number-max flags)
      (define db #f)
      (define open (lambda () (set! db (gdbm-open path flags))))
      (define close (lambda () (gdbm-close db)
		       (set! db #f) #| Safety |# ))
      (define get-root (lambda () (maybe-map (lambda (s) (string->number s)) (gdbm-ref db "root"))))
      (define set-root! (lambda (root) (if root (gdbm-set! db "root" (number->string root))
				      (gdbm-delete! db "root"))))
      (define put! (lambda (hash node)
		     (gdbm-set! db (number->string hash)
				(number-node->string number-max node))))
      (define ref (lambda (hash)
		    (maybe-map (lambda (hash)
				 (maybe-map string->number-node
					    (gdbm-ref db (number->string hash)))) hash)))
      (define delete! (lambda (hash)
			(gdbm-delete! db (number->string hash))))
      (make-smt-db open close get-root set-root! put! ref delete!))))
